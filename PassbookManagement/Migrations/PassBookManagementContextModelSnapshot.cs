// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PassbookManagement.Data;

namespace PassbookManagement.Migrations
{
    [DbContext(typeof(PassBookManagementContext))]
    partial class PassBookManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.6");

            modelBuilder.Entity("PassbookManagement.Models.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCardNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SignatureImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("PassbookManagement.Models.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCardNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("PassbookManagement.Models.InterestValue", b =>
                {
                    b.Property<string>("InterestId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("StandardInterestRate")
                        .HasColumnType("REAL");

                    b.Property<int>("StandardPeriod")
                        .HasColumnType("INTEGER");

                    b.HasKey("InterestId");

                    b.ToTable("Interest");
                });

            modelBuilder.Entity("PassbookManagement.Models.LoginAccount", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.Property<string>("Decent")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserRefId")
                        .HasColumnType("TEXT");

                    b.HasKey("Username");

                    b.HasIndex("UserRefId")
                        .IsUnique();

                    b.ToTable("LoginAccount");
                });

            modelBuilder.Entity("PassbookManagement.Models.Passbook", b =>
                {
                    b.Property<string>("PassbookId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Balance")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerRefId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeRefId")
                        .HasColumnType("TEXT");

                    b.Property<string>("InterestRefId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFinalized")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OpenMethod")
                        .HasColumnType("TEXT");

                    b.Property<int>("Period")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SpendingAccountRefId")
                        .HasColumnType("TEXT");

                    b.HasKey("PassbookId");

                    b.HasIndex("CustomerRefId");

                    b.HasIndex("EmployeeRefId");

                    b.HasIndex("InterestRefId");

                    b.HasIndex("SpendingAccountRefId");

                    b.ToTable("Passbook");
                });

            modelBuilder.Entity("PassbookManagement.Models.SpendingAccount", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Balance")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerRefId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeRefId")
                        .HasColumnType("TEXT");

                    b.Property<float>("InterestRate")
                        .HasColumnType("REAL");

                    b.HasKey("AccountId");

                    b.HasIndex("CustomerRefId")
                        .IsUnique();

                    b.HasIndex("EmployeeRefId");

                    b.ToTable("SpendingAccount");
                });

            modelBuilder.Entity("PassbookManagement.Models.Transaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmployeeRefId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsViolation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PassbookRefId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpendingAccountRefId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionMethod")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionType")
                        .HasColumnType("TEXT");

                    b.HasKey("TransactionId");

                    b.HasIndex("EmployeeRefId");

                    b.HasIndex("PassbookRefId");

                    b.HasIndex("SpendingAccountRefId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("PassbookManagement.Models.LoginAccount", b =>
                {
                    b.HasOne("PassbookManagement.Models.Customer", "Customer")
                        .WithOne("LoginAccount")
                        .HasForeignKey("PassbookManagement.Models.LoginAccount", "UserRefId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("PassbookManagement.Models.Passbook", b =>
                {
                    b.HasOne("PassbookManagement.Models.Customer", "Customer")
                        .WithMany("Passbooks")
                        .HasForeignKey("CustomerRefId");

                    b.HasOne("PassbookManagement.Models.Employee", "Employee")
                        .WithMany("Passbooks")
                        .HasForeignKey("EmployeeRefId");

                    b.HasOne("PassbookManagement.Models.InterestValue", "InterestValue")
                        .WithMany("Passbooks")
                        .HasForeignKey("InterestRefId");

                    b.HasOne("PassbookManagement.Models.SpendingAccount", "SpendingAccount")
                        .WithMany("Passbooks")
                        .HasForeignKey("SpendingAccountRefId");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("InterestValue");

                    b.Navigation("SpendingAccount");
                });

            modelBuilder.Entity("PassbookManagement.Models.SpendingAccount", b =>
                {
                    b.HasOne("PassbookManagement.Models.Customer", "Customer")
                        .WithOne("SpendingAccount")
                        .HasForeignKey("PassbookManagement.Models.SpendingAccount", "CustomerRefId");

                    b.HasOne("PassbookManagement.Models.Employee", "Employee")
                        .WithMany("SpendingAccounts")
                        .HasForeignKey("EmployeeRefId");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("PassbookManagement.Models.Transaction", b =>
                {
                    b.HasOne("PassbookManagement.Models.Employee", "Employee")
                        .WithMany("Transactions")
                        .HasForeignKey("EmployeeRefId");

                    b.HasOne("PassbookManagement.Models.Passbook", "Passbook")
                        .WithMany()
                        .HasForeignKey("PassbookRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PassbookManagement.Models.SpendingAccount", "SpendingAccount")
                        .WithMany("Transactions")
                        .HasForeignKey("SpendingAccountRefId");

                    b.Navigation("Employee");

                    b.Navigation("Passbook");

                    b.Navigation("SpendingAccount");
                });

            modelBuilder.Entity("PassbookManagement.Models.Customer", b =>
                {
                    b.Navigation("LoginAccount");

                    b.Navigation("Passbooks");

                    b.Navigation("SpendingAccount");
                });

            modelBuilder.Entity("PassbookManagement.Models.Employee", b =>
                {
                    b.Navigation("Passbooks");

                    b.Navigation("SpendingAccounts");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PassbookManagement.Models.InterestValue", b =>
                {
                    b.Navigation("Passbooks");
                });

            modelBuilder.Entity("PassbookManagement.Models.SpendingAccount", b =>
                {
                    b.Navigation("Passbooks");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
